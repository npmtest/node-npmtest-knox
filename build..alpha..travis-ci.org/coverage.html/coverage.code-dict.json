{"/home/travis/build/npmtest/node-npmtest-knox/test.js":"/* istanbul instrument in package npmtest_knox */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-knox/lib.npmtest_knox.js":"/* istanbul instrument in package npmtest_knox */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_knox = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_knox = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-knox/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-knox && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_knox */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_knox\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_knox.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_knox.rollup.js'] =\n            local.assetsDict['/assets.npmtest_knox.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_knox.__dirname + '/lib.npmtest_knox.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-knox/node_modules/knox/lib/index.js":"\"use strict\";\n\n/*!\n * knox\n * Copyright(c) 2010–2012 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Client is the main export.\n */\n\nexports = module.exports = require('./client');\n\n/**\n * Expose utilities.\n *\n * @type Object\n */\n\nexports.utils = require('./utils');\n\n/**\n * Expose auth utils.\n *\n * @type Object\n */\n\nexports.auth = require('./auth');\n","/home/travis/build/npmtest/node-npmtest-knox/node_modules/knox/lib/client.js":"\"use strict\";\n\n/*!\n * knox - Client\n * Copyright(c) 2010 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Emitter = require('events').EventEmitter\n  , debug = require('debug')('knox')\n  , utils = require('./utils')\n  , auth = require('./auth')\n  , http = require('http')\n  , https = require('https')\n  , url = require('url')\n  , mime = require('mime')\n  , fs = require('fs')\n  , crypto = require('crypto')\n  , once = require('once')\n  , xml2js = require('xml2js')\n  , StreamCounter = require('stream-counter')\n  , qs = require('querystring');\n\n// The max for multi-object delete, bucket listings, etc.\nvar BUCKET_OPS_MAX = 1000;\n\n// http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html\nvar MIN_BUCKET_LENGTH = 3;\nvar MAX_NON_US_STANDARD_BUCKET_LENGTH = 63;\nvar MAX_US_STANDARD_BUCKET_LENGTH = 255;\nvar US_STANDARD_BUCKET = /^[A-Za-z0-9\\._-]*$/;\nvar BUCKET_LABEL = /^(?:[a-z0-9][a-z0-9-]*[a-z0-9]|[a-z0-9])$/;\nvar IPV4_ADDRESS = /^(\\d{1,3}\\.){3}(\\d{1,3})$/;\n\n/**\n * Register event listeners on a request object to convert standard http\n * request events into appropriate call backs.\n * @param {Request} req The http request\n * @param {Function} fn(err, res) The callback function.\n * err - The exception if an exception occurred while sending the http\n *       request (for example if internet connection was lost).\n * res - The http response if no exception occurred.\n * @api private\n */\nfunction registerReqListeners(req, fn){\n  req.on('response', function (res) {\n    fn(null, res);\n  });\n  req.on('error', fn);\n}\n\nfunction ensureLeadingSlash(filename) {\n  return filename[0] !== '/' ? '/' + filename : filename;\n}\n\nfunction removeLeadingSlash(filename) {\n  return filename[0] === '/' ? filename.substring(1) : filename;\n}\n\nfunction encodeSpecialCharacters(filename) {\n  // Note: these characters are valid in URIs, but S3 does not like them for\n  // some reason.\n  return encodeURI(filename).replace(/[!'()#*+? ]/g, function (char) {\n    return '%' + char.charCodeAt(0).toString(16);\n  });\n}\n\nfunction getHeader(headers, headerNameLowerCase) {\n  for (var header in headers) {\n    if (header.toLowerCase() === headerNameLowerCase) {\n      return headers[header];\n    }\n  }\n  return null;\n}\n\nfunction isNotDnsCompliant(bucket) {\n  if (bucket.length > MAX_NON_US_STANDARD_BUCKET_LENGTH) {\n    return 'is more than ' + MAX_NON_US_STANDARD_BUCKET_LENGTH + ' characters';\n  }\n\n  if (IPV4_ADDRESS.test(bucket)) {\n    return 'is formatted as an IPv4 address';\n  }\n\n  var bucketLabels = bucket.split('.');\n  var bucketLabelsAreValid = bucketLabels.every(function (label) {\n    return BUCKET_LABEL.test(label);\n  });\n\n  if (!bucketLabelsAreValid) {\n    return 'does not consist of valid period-separated labels';\n  }\n\n  return false;\n}\n\nfunction isInvalid(bucket) {\n  if (bucket.length < MIN_BUCKET_LENGTH) {\n    return 'is less than ' + MIN_BUCKET_LENGTH + ' characters';\n  }\n  if (bucket.length > MAX_US_STANDARD_BUCKET_LENGTH) {\n    return 'is more than ' + MAX_US_STANDARD_BUCKET_LENGTH + ' characters';\n  }\n\n  if (!US_STANDARD_BUCKET.test(bucket)) {\n    return 'contains invalid characters';\n  }\n\n  return false;\n}\n\nfunction containsPeriod(bucket) {\n  return bucket.indexOf('.') !== -1;\n}\n\nfunction autoDetermineStyle(options) {\n  if (!options.style && options.secure !== false &&\n      containsPeriod(options.bucket)) {\n    options.style = 'path';\n    return;\n  }\n\n  var dnsUncompliance = isNotDnsCompliant(options.bucket);\n  if (dnsUncompliance) {\n    if (options.style === 'virtualHosted') {\n      throw new Error('Cannot use \"virtualHosted\" style with a ' +\n                      'DNS-uncompliant bucket name: \"' + options.bucket +\n                      '\" is ' + dnsUncompliance + '.');\n    }\n\n    options.style = 'path';\n    return;\n  }\n\n  if (!options.style) {\n    options.style = 'virtualHosted';\n  }\n}\n\n/**\n * Get headers needed for Client#copy and Client#copyTo.\n *\n * @param {String} sourceFilename\n * @param {Object} headers\n * @api private\n */\n\nfunction getCopyHeaders(sourceBucket, sourceFilename, headers) {\n  sourceFilename = encodeSpecialCharacters(ensureLeadingSlash(sourceFilename));\n  headers = utils.merge({}, headers || {});\n  headers['x-amz-copy-source'] = '/' + sourceBucket + sourceFilename;\n  headers['Content-Length'] = 0; // to avoid Node's automatic chunking if omitted\n  return headers;\n}\n\n\n/**\n * Initialize a `Client` with the given `options`.\n *\n * Required:\n *\n *  - `key`     amazon api key\n *  - `secret`  amazon secret\n *  - `bucket`  bucket name string, ex: \"learnboost\"\n *\n * @param {Object} options\n * @api public\n */\n\nvar Client = module.exports = exports = function Client(options) {\n  if (!options.key) throw new Error('aws \"key\" required');\n  if (!options.secret) throw new Error('aws \"secret\" required');\n  if (!options.bucket) throw new Error('aws \"bucket\" required');\n\n  if (options.style && options.style !== 'virtualHosted' &&\n      options.style !== 'path') {\n    throw new Error('style must be \"virtualHosted\" or \"path\"');\n  }\n\n  if (options.port !== undefined && isNaN(parseInt(options.port))) {\n    throw new Error('port must be a number.');\n  }\n\n  var invalidness = isInvalid(options.bucket);\n  var dnsUncompliance = isNotDnsCompliant(options.bucket);\n\n  if (invalidness) {\n    throw new Error('Bucket name \"' + options.bucket + '\" ' + invalidness + '.');\n  }\n\n  // Save original options, we will need them for Client#copyTo\n  this.options = utils.merge({}, options);\n\n  // Make sure we don't override options the user passes in.\n  options = utils.merge({}, options);\n  autoDetermineStyle(options);\n\n  if (!options.endpoint) {\n    if (!options.region || options.region === 'us-standard' || options.region === 'us-east-1') {\n      options.endpoint = 's3.amazonaws.com';\n      options.region = 'us-standard';\n    } else {\n      options.endpoint = 's3-' + options.region + '.amazonaws.com';\n    }\n\n    if (options.region !== 'us-standard') {\n      if (dnsUncompliance) {\n        throw new Error('Outside of the us-standard region, bucket names must' +\n                        ' be DNS-compliant. The name \"' + options.bucket +\n                        '\" ' + dnsUncompliance + '.');\n      }\n    }\n  } else {\n    options.region = undefined;\n  }\n\n  var portSuffix = 'undefined' == typeof options.port ? \"\" : \":\" + options.port;\n  this.secure = 'undefined' == typeof options.port;\n\n  if (options.style === 'virtualHosted') {\n    this.host = options.bucket + '.' + options.endpoint;\n    this.urlBase = options.bucket + '.' + options.endpoint + portSuffix;\n  } else {\n    this.host = options.endpoint;\n    this.urlBase = options.endpoint + portSuffix + '/' + options.bucket;\n  }\n\n  // HTTP in Node.js < 0.12 is horribly broken, and leads to lots of \"socket\n  // hang up\" errors: https://github.com/LearnBoost/knox/issues/116. See\n  // https://github.com/LearnBoost/knox/issues/116#issuecomment-15045187 and\n  // https://github.com/substack/hyperquest#rant\n  this.agent = false;\n\n  utils.merge(this, options);\n\n  this.url = this.secure ? this.https : this.http;\n};\n\n/**\n * Request with `filename` the given `method`, and optional `headers`.\n *\n * @param {String} method\n * @param {String} filename\n * @param {Object} headers\n * @return {ClientRequest}\n * @api private\n */\n\nClient.prototype.request = function(method, filename, headers){\n  var options = { hostname: this.host, agent: this.agent, port: this.port }\n    , date = new Date\n    , headers = headers || {}\n    , fixedFilename = ensureLeadingSlash(filename);\n\n  // Default headers\n  headers.Date = date.toUTCString()\n  if (this.style === 'virtualHosted') {\n    headers.Host = this.host;\n  }\n\n  if ('undefined' != typeof this.token)\n    headers['x-amz-security-token'] = this.token;\n\n  // Authorization header\n  headers.Authorization = auth.authorization({\n      key: this.key\n    , secret: this.secret\n    , verb: method\n    , date: date\n    , resource: auth.canonicalizeResource('/' + this.bucket + fixedFilename)\n    , contentType: getHeader(headers, 'content-type')\n    , md5: getHeader(headers, 'content-md5') || ''\n    , amazonHeaders: auth.canonicalizeHeaders(headers)\n  });\n\n  var pathPrefix = this.style === 'path' ? '/' + this.bucket : '';\n\n  // Issue request\n  options.method = method;\n  options.path = pathPrefix + fixedFilename;\n  options.headers = headers;\n  var req = (this.secure ? https : http).request(options);\n  req.url = this.url(filename);\n  debug('%s %s', method, req.url);\n\n  return req;\n};\n\n/**\n * PUT data to `filename` with optional `headers`.\n *\n * Example:\n *\n *     // Fetch the size\n *     fs.stat('Readme.md', function(err, stat){\n *      // Create our request\n *      var req = client.put('/test/Readme.md', {\n *          'Content-Length': stat.size\n *        , 'Content-Type': 'text/plain'\n *      });\n *      fs.readFile('Readme.md', function(err, buf){\n *        // Output response\n *        req.on('response', function(res){\n *          console.log(res.statusCode);\n *          console.log(res.headers);\n *          res.pipe(fs.createWriteStream('Readme.md'));\n *        });\n *        // Send the request with the file's Buffer obj\n *        req.end(buf);\n *      });\n *     });\n *\n * @param {String} filename\n * @param {Object} headers\n * @return {ClientRequest}\n * @api public\n */\n\nClient.prototype.put = function(filename, headers){\n  headers = utils.merge({}, headers || {});\n  return this.request('PUT', encodeSpecialCharacters(filename), headers);\n};\n\n/**\n * PUT the file at `src` to `filename`, with callback `fn`\n * receiving a possible exception, and the response object.\n *\n * Example:\n *\n *    client\n *     .putFile('package.json', '/test/package.json', function(err, res){\n *       if (err) throw err;\n *       console.log(res.statusCode);\n *       console.log(res.headers);\n *     });\n *\n * @param {String} src\n * @param {String} filename\n * @param {Object|Function} headers\n * @param {Function} fn\n * @return {EventEmitter}\n * @api public\n */\n\nClient.prototype.putFile = function(src, filename, headers, fn){\n  var self = this;\n  var emitter = new Emitter;\n\n  if ('function' == typeof headers) {\n    fn = headers;\n    headers = {};\n  }\n\n  debug('put %s', src);\n  fs.stat(src, function (err, stat) {\n    if (err) return fn(err);\n\n    var contentType = mime.lookup(src);\n\n    // Add charset if it's known.\n    var charset = mime.charsets.lookup(contentType);\n    if (charset) {\n      contentType += '; charset=' + charset;\n    }\n\n    headers = utils.merge({\n        'Content-Length': stat.size\n      , 'Content-Type': contentType\n    }, headers);\n\n    var stream = fs.createReadStream(src);\n\n    var req = self.putStream(stream, filename, headers, fn);\n\n    req.on('progress', emitter.emit.bind(emitter, 'progress'));\n  });\n\n  return emitter;\n};\n\n/**\n * PUT the given `stream` as `filename` with `headers`.\n * `headers` must contain `'Content-Length'` at least.\n *\n * @param {Stream} stream\n * @param {String} filename\n * @param {Object} headers\n * @param {Function} fn\n * @return {ClientRequest}\n * @api public\n */\n\nClient.prototype.putStream = function(stream, filename, headers, fn){\n  var contentLength = getHeader(headers, 'content-length');\n  if (contentLength === null) {\n    process.nextTick(function () {\n      fn(new Error('You must specify a Content-Length header.'));\n    });\n    return;\n  }\n\n  var self = this;\n  var req = self.put(filename, headers);\n\n  fn = once(fn);\n  registerReqListeners(req, fn);\n  stream.on('error', fn);\n\n  var counter = new StreamCounter();\n  counter.on('progress', function(){\n    req.emit('progress', {\n        percent: counter.bytes / contentLength * 100 | 0\n      , written: counter.bytes\n      , total: contentLength\n    });\n  });\n\n  stream.pipe(counter);\n  stream.pipe(req);\n  return req;\n};\n\n/**\n * PUT the given `buffer` as `filename` with optional `headers`.\n * Callback `fn` receives a possible exception and the response object.\n *\n * @param {Buffer} buffer\n * @param {String} filename\n * @param {Object|Function} headers\n * @param {Function} fn\n * @return {ClientRequest}\n * @api public\n */\n\nClient.prototype.putBuffer = function(buffer, filename, headers, fn){\n  if ('function' == typeof headers) {\n    fn = headers;\n    headers = {};\n  }\n\n  headers['Content-Length'] = buffer.length;\n\n  var req = this.put(filename, headers);\n  fn = once(fn);\n  registerReqListeners(req, fn);\n  req.end(buffer);\n  return req;\n};\n\n/**\n * Copy files from `sourceFilename` to `destFilename` with optional `headers`.\n *\n * @param {String} sourceFilename\n * @param {String} destFilename\n * @param {Object} headers\n * @return {ClientRequest}\n * @api public\n */\n\nClient.prototype.copy = function(sourceFilename, destFilename, headers){\n  return this.put(destFilename, getCopyHeaders(this.bucket, sourceFilename, headers));\n};\n\n/**\n * Copy files from `sourceFilename` to `destFilename` with optional `headers`\n * and callback `fn` with a possible exception and the response.\n *\n * @param {String} sourceFilename\n * @param {String} destFilename\n * @param {Object|Function} headers\n * @param {Function} fn\n * @api public\n */\n\nClient.prototype.copyFile = function(sourceFilename, destFilename, headers, fn){\n  if ('function' == typeof headers) {\n    fn = headers;\n    headers = {};\n  }\n\n  var req = this.copy(sourceFilename, destFilename, headers);\n  fn = once(fn);\n  registerReqListeners(req, fn);\n  req.end();\n  return req;\n};\n\n/**\n * Copy files from `sourceFilename` to `destFilename` of the bucket `destBucket`\n * with optional `headers`.\n *\n * @param {String} sourceFilename\n * @param {String|Object} destBucket\n * @param {String} destFilename\n * @param {Object} headers\n * @return {ClientRequest}\n * @api public\n */\n\nClient.prototype.copyTo = function(sourceFilename, destBucket, destFilename, headers){\n  var options = utils.merge({}, this.options);\n  if (typeof destBucket == 'string') {\n    options.bucket = destBucket;\n  } else {\n    utils.merge(options, destBucket);\n  }\n  var client = exports.createClient(options);\n  return client.put(destFilename, getCopyHeaders(this.bucket, sourceFilename, headers));\n};\n\n/**\n * Copy file from `sourceFilename` to `destFilename` of the bucket `destBucket\n * with optional `headers` and callback `fn` with a possible exception and the response.\n *\n * @param {String} sourceFilename\n * @param {String} destBucket\n * @param {String} destFilename\n * @param {Object|Function} headers\n * @param {Function} fn\n * @api public\n */\n\nClient.prototype.copyFileTo = function(sourceFilename, destBucket, destFilename, headers, fn){\n  if ('function' == typeof headers) {\n    fn = headers;\n    headers = {};\n  }\n\n  var req = this.copyTo(sourceFilename, destBucket, destFilename, headers);\n  fn = once(fn);\n  registerReqListeners(req, fn);\n  req.end();\n  return req;\n};\n\n/**\n * GET `filename` with optional `headers`.\n *\n * @param {String} filename\n * @param {Object} headers\n * @return {ClientRequest}\n * @api public\n */\n\nClient.prototype.get = function(filename, headers){\n  return this.request('GET', encodeSpecialCharacters(filename), headers);\n};\n\n/**\n * GET `filename` with optional `headers` and callback `fn`\n * with a possible exception and the response.\n *\n * @param {String} filename\n * @param {Object|Function} headers\n * @param {Function} fn\n * @api public\n */\n\nClient.prototype.getFile = function(filename, headers, fn){\n  if ('function' == typeof headers) {\n    fn = headers;\n    headers = {};\n  }\n\n  var req = this.get(filename, headers);\n  registerReqListeners(req, fn);\n  req.end();\n  return req;\n};\n\n/**\n * Issue a HEAD request on `filename` with optional `headers.\n *\n * @param {String} filename\n * @param {Object} headers\n * @return {ClientRequest}\n * @api public\n */\n\nClient.prototype.head = function(filename, headers){\n  return this.request('HEAD', encodeSpecialCharacters(filename), headers);\n};\n\n/**\n * Issue a HEAD request on `filename` with optional `headers`\n * and callback `fn` with a possible exception and the response.\n *\n * @param {String} filename\n * @param {Object|Function} headers\n * @param {Function} fn\n * @api public\n */\n\nClient.prototype.headFile = function(filename, headers, fn){\n  if ('function' == typeof headers) {\n    fn = headers;\n    headers = {};\n  }\n  var req = this.head(filename, headers);\n  fn = once(fn);\n  registerReqListeners(req, fn);\n  req.end();\n  return req;\n};\n\n/**\n * DELETE `filename` with optional `headers.\n *\n * @param {String} filename\n * @param {Object} headers\n * @return {ClientRequest}\n * @api public\n */\n\nClient.prototype.del = function(filename, headers){\n  return this.request('DELETE', encodeSpecialCharacters(filename), headers);\n};\n\n/**\n * DELETE `filename` with optional `headers`\n * and callback `fn` with a possible exception and the response.\n *\n * @param {String} filename\n * @param {Object|Function} headers\n * @param {Function} fn\n * @api public\n */\n\nClient.prototype.deleteFile = function(filename, headers, fn){\n  if ('function' == typeof headers) {\n    fn = headers;\n    headers = {};\n  }\n  var req = this.del(filename, headers);\n  fn = once(fn);\n  registerReqListeners(req, fn);\n  req.end();\n  return req;\n};\n\nfunction xmlEscape(string) {\n  return string\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;');\n}\n\nfunction makeDeleteXmlBuffer(keys) {\n    var tags = keys.map(function(key){\n      return '<Object><Key>' +\n        xmlEscape(removeLeadingSlash(key)) +\n        '</Key></Object>';\n    });\n    return new Buffer('<?xml version=\"1.0\" encoding=\"UTF-8\"?>' +\n      '<Delete>' + tags.join('') + '</Delete>', 'utf8');\n}\n\n/**\n * Delete up to 1000 files at a time, with optional `headers`\n * and callback `fn` with a possible exception and the response.\n *\n * @param {Array[String]} filenames\n * @param {Object|Function} headers\n * @param {Function} fn\n * @api public\n */\n\nClient.prototype.deleteMultiple = function(filenames, headers, fn){\n  if (filenames.length > BUCKET_OPS_MAX) {\n    throw new Error('Can only delete up to ' + BUCKET_OPS_MAX + ' files ' +\n      'at a time. You\\'ll need to batch them.');\n  }\n\n  if ('function' == typeof headers) {\n    fn = headers;\n    headers = {};\n  }\n\n  var xml = makeDeleteXmlBuffer(filenames);\n\n  headers['Content-Length'] = xml.length;\n  headers['Content-MD5'] = crypto.createHash('md5').update(xml).digest('base64');\n\n  var req = this.request('POST', '/?delete', headers);\n  fn = once(fn);\n  registerReqListeners(req, fn);\n  req.end(xml);\n  return req;\n};\n\n/**\n * Possible params for Client#list.\n *\n * @type {Object}\n */\n\nvar LIST_PARAMS = {\n    delimiter: true\n  , marker: true\n  ,'max-keys': true\n  , prefix: true\n};\n\n/**\n * Normalization map for Client#list.\n *\n * @type {Object}\n */\n\nvar RESPONSE_NORMALIZATION = {\n    MaxKeys: Number,\n    IsTruncated: Boolean,\n    LastModified: Date,\n    Size: Number,\n    Contents: Array,\n    CommonPrefixes: Array\n};\n\n/**\n * Convert data we get from S3 xml in Client#list, since every primitive\n * value there is a string.\n *\n * @type {Object}\n */\n\nfunction normalizeResponse(data) {\n  for (var key in data) {\n    var Constr = RESPONSE_NORMALIZATION[key];\n\n    if (Constr) {\n      if (Constr === Date) {\n        data[key] = new Date(data[key]);\n      } else if (Constr === Array) {\n        // If there's only one element in the array xml2js doesn't know that\n        // it should be an array; array-ify it.\n        if (!Array.isArray(data[key])) {\n          data[key] = [data[key]];\n        }\n      } else if (Constr === Boolean) {\n        data[key] = data[key] === 'true';\n      } else {\n        data[key] = Constr(data[key]);\n      }\n    }\n\n    if (Array.isArray(data[key])) {\n      data[key].forEach(normalizeResponse);\n    }\n  }\n}\n\n/**\n * List up to 1000 objects at a time, with optional `headers`, `params`\n * and callback `fn` with a possible exception and the response.\n *\n * @param {Object|Function} params\n * @param {Object|Function} headers\n * @param {Function} fn\n * @api public\n */\n\nClient.prototype.list = function(params, headers, fn){\n  if ('function' == typeof headers) {\n    fn = headers;\n    headers = {};\n  }\n\n  if ('function' == typeof params) {\n    fn = params;\n    params = null;\n  }\n\n  if (params && !LIST_PARAMS[Object.keys(params)[0]]) {\n    headers = params;\n    params = null;\n  }\n\n  var url = params ? '?' + qs.stringify(params) : '';\n  var req = this.request('GET', url, headers);\n  registerReqListeners(req, function(err, res){\n    if (err) return fn(err);\n\n    var xmlStr = '';\n\n    res.on('data', function(chunk){\n      xmlStr += chunk;\n    });\n\n    res.on('end', function(){\n      new xml2js.Parser({explicitArray: false, explicitRoot: false})\n        .parseString(xmlStr, function(err, data){\n          if (err) return fn(err);\n          if (data == null) return fn(new Error('null response received'));\n\n          delete data.$;\n          normalizeResponse(data);\n\n          if (!('Contents' in data)) {\n            data.Contents = [];\n          }\n\n          fn(null, data);\n        });\n    });\n  });\n  req.on('error', fn);\n  req.end();\n  return req;\n};\n\n/**\n * Return a url to the given `filename`.\n *\n * @param {String} filename\n * @return {String}\n * @api public\n */\n\nClient.prototype.http = function(filename){\n  filename = encodeSpecialCharacters(ensureLeadingSlash(filename));\n\n  return 'http://' + this.urlBase + filename;\n};\n\n/**\n * Return an HTTPS url to the given `filename`.\n *\n * @param {String} filename\n * @return {String}\n * @api public\n */\n\nClient.prototype.https = function(filename){\n  filename = encodeSpecialCharacters(ensureLeadingSlash(filename));\n\n  return 'https://' + this.urlBase + filename;\n};\n\n/**\n * Return an S3 presigned url to the given `filename`.\n *\n * @param {String} filename\n * @param {Date} expiration\n * @param {Object} options: can take verb, contentType, and qs object\n * @return {String}\n * @api public\n */\n\nClient.prototype.signedUrl = function(filename, expiration, options){\n  var epoch = Math.floor(expiration.getTime()/1000)\n    , pathname = url.parse(filename).pathname\n    , resource = '/' + this.bucket + ensureLeadingSlash(pathname);\n\n  if (options && options.qs) {\n    resource += '?' + decodeURIComponent(qs.stringify(options.qs));\n  }\n\n  var signature = auth.signQuery({\n      secret: this.secret\n    , date: epoch\n    , resource: resource\n    , verb: (options && options.verb) || 'GET'\n    , contentType: options && options.contentType\n    , extraHeaders : options && options.extraHeaders\n    , token: this.token\n  });\n\n  var queryString = qs.stringify(utils.merge({\n    Expires: epoch,\n    AWSAccessKeyId: this.key,\n    Signature: signature\n  }, (options && options.qs) || {}));\n\n  if (typeof this.token !== 'undefined')\n      queryString += '&x-amz-security-token=' + encodeURIComponent(this.token);\n\n  return this.url(filename) + '?' + queryString;\n};\n\n/**\n * Shortcut for `new Client()`.\n *\n * @param {Object} options\n * @see Client()\n * @api public\n */\n\nexports.createClient = function(options){\n  return new Client(options);\n};\n","/home/travis/build/npmtest/node-npmtest-knox/node_modules/knox/lib/utils.js":"\"use strict\";\n\n/*!\n * knox - utils\n * Copyright(c) 2010 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Merge object `b` with object `a`.\n *\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n * @api private\n */\n\nexports.merge = function(a, b){\n  var keys = Object.keys(b);\n  for (var i = 0, len = keys.length; i < len; ++i) {\n    var key = keys[i];\n    a[key] = b[key]\n  }\n  return a;\n};\n\n/**\n * Base64.\n */\n\nexports.base64 = {\n\n  /**\n   * Base64 encode the given `str`.\n   *\n   * @param {String} str\n   * @return {String}\n   * @api private\n   */\n\n  encode: function(str){\n    return new Buffer(str).toString('base64');\n  },\n\n  /**\n   * Base64 decode the given `str`.\n   *\n   * @param {String} str\n   * @return {String}\n   * @api private\n   */\n\n  decode: function(str){\n    return new Buffer(str, 'base64').toString();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-knox/node_modules/knox/lib/auth.js":"\"use strict\";\n\n/*!\n * knox - auth\n * Copyright(c) 2010 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar crypto = require('crypto')\n  , parse = require('url').parse;\n\n/**\n * Query string params permitted in the canonicalized resource.\n * @see http://docs.amazonwebservices.com/AmazonS3/latest/dev/RESTAuthentication.html#ConstructingTheCanonicalizedResourceElement\n */\n\nvar whitelist = [\n    'acl'\n  , 'delete'\n  , 'lifecycle'\n  , 'location'\n  , 'logging'\n  , 'notification'\n  , 'partNumber'\n  , 'policy'\n  , 'requestPayment'\n  , 'torrent'\n  , 'uploadId'\n  , 'uploads'\n  , 'versionId'\n  , 'versioning'\n  , 'versions'\n  , 'website'\n];\n\n/**\n * Return an \"Authorization\" header value with the given `options`\n * in the form of \"AWS <key>:<signature>\"\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nexports.authorization = function(options){\n  return 'AWS ' + options.key + ':' + exports.sign(options);\n};\n\n/**\n * Simple HMAC-SHA1 Wrapper\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nexports.hmacSha1 = function(options){\n  return crypto.createHmac('sha1', options.secret).update(new Buffer(options.message, 'utf-8')).digest('base64');\n};\n\n/**\n * Create a base64 sha1 HMAC for `options`.\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nexports.sign = function(options){\n  options.message = exports.stringToSign(options);\n  return exports.hmacSha1(options);\n};\n\n/**\n * Create a base64 sha1 HMAC for `options`.\n *\n * Specifically to be used with S3 presigned URLs\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nexports.signQuery = function(options){\n  options.message = exports.queryStringToSign(options);\n  return exports.hmacSha1(options);\n};\n\n/**\n * Return a string for sign() with the given `options`.\n *\n * Spec:\n *\n *    <verb>\\n\n *    <md5>\\n\n *    <content-type>\\n\n *    <date>\\n\n *    [headers\\n]\n *    <resource>\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nexports.stringToSign = function(options){\n  var headers = options.amazonHeaders || '';\n  if (headers) headers += '\\n';\n  return [\n      options.verb\n    , options.md5\n    , options.contentType\n    , options.date instanceof Date ? options.date.toUTCString() : options.date\n    , headers + options.resource\n  ].join('\\n');\n};\n\n/**\n * Return a string for sign() with the given `options`, but is meant exclusively\n * for S3 presigned URLs\n *\n * Spec:\n *\n *    <verb>\\n\\n\n *    <contentType or nothing>\\n\n *    <date>\\n\n *    <x-amz-security-token header>\\n --- optional\n *    <resource>\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nexports.queryStringToSign = function(options){\n  return (options.verb || 'GET') + '\\n\\n' +\n    (typeof options.contentType !== 'undefined' ?\n      options.contentType : '') + '\\n' +\n    options.date + '\\n' +\n    (typeof options.extraHeaders !== 'undefined' ?\n      exports.canonicalizeHeaders(options.extraHeaders) + '\\n' : '') +\n    (typeof options.token !== 'undefined' ?\n      'x-amz-security-token:' + options.token + '\\n' : '') +\n    options.resource;\n};\n\n/**\n * Perform the following:\n *\n *  - ignore non-amazon headers\n *  - lowercase fields\n *  - sort lexicographically\n *  - trim whitespace between \":\"\n *  - join with newline\n *\n * @param {Object} headers\n * @return {String}\n * @api private\n */\n\nexports.canonicalizeHeaders = function(headers){\n  var buf = []\n    , fields = Object.keys(headers);\n  for (var i = 0, len = fields.length; i < len; ++i) {\n    var field = fields[i]\n      , val = headers[field];\n\n    field = field.toLowerCase();\n\n    if (field.indexOf('x-amz') !== 0 || field === 'x-amz-date') {\n      continue;\n    }\n\n    buf.push(field + ':' + val);\n  }\n\n  var headerSort = function(a, b) {\n    // Headers are sorted lexigraphically based on the header name only.\n    a = a.split(\":\")[0]\n    b = b.split(\":\")[0]\n\n    return a > b ? 1 : -1;\n  }\n  return buf.sort(headerSort).join('\\n');\n};\n\n/**\n * Perform the following:\n *\n *  - ignore non sub-resources\n *  - sort lexicographically\n *\n * @param {String} a URI-encoded resource (path + query string)\n * @return {String}\n * @api private\n */\n\nexports.canonicalizeResource = function(resource){\n  var url = parse(resource, true)\n    , path = url.pathname\n    , buf = [];\n\n  // apply the query string whitelist\n  Object.keys(url.query).forEach(function (key) {\n      if (whitelist.indexOf(key) != -1) {\n          buf.push(key + (url.query[key] ? \"=\" + url.query[key] : ''));\n      }\n  });\n\n  return path + (buf.length\n    ? '?' + buf.sort().join('&')\n    : '');\n};\n"}